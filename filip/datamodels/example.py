# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2021-02-20T12:54:57+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field, confloat, constr


class Meta(BaseModel):
    isStarred: Optional[bool] = None


class GridPos(BaseModel):
    x: Optional[float] = Field(None, description='The x position, in same unit as w.')
    y: Optional[float] = Field(None, description='The y position, in same unit as h.')
    w: Optional[confloat(ge=1.0, le=24.0)] = Field(
        None, description='1-24 (the width of the dashboard is divided into 24 columns)'
    )
    h: Optional[float] = Field(
        None, description='In grid height units, each represents 30 pixels.'
    )


class Panel(BaseModel):
    type: Optional[str] = None
    title: Optional[str] = None
    gridPos: Optional[GridPos] = Field(
        None,
        description='The gridPos property describes the panel size and position in grid coordinates.',
    )
    id: Optional[float] = None
    mode: Optional[str] = None
    content: Optional[str] = None


class Timepicker(BaseModel):
    collapse: Optional[bool] = Field(
        None, description='whether timepicker is collapsed or not'
    )
    enable: Optional[bool] = Field(
        None, description='whether timepicker is enabled or not'
    )
    notice: Optional[bool] = None
    now: Optional[bool] = None
    refresh_intervals: Optional[List[str]] = None
    status: Optional[str] = None
    type: Optional[str] = None


class Current(BaseModel):
    tags: Optional[List[str]] = None
    text: Optional[str] = None
    value: Optional[str] = None


class Option(BaseModel):
    selected: Optional[bool] = None
    text: Optional[str] = None
    value: Optional[str] = None


class ListItem(BaseModel):
    allFormat: Optional[str] = Field(
        None,
        description='format to use while fetching all values from data source, eg: wildcard, glob, regex, pipe, etc.',
    )
    current: Optional[Current] = Field(
        None, description='shows current selected variable text/value on the dashboard'
    )
    datasource: Optional[Optional[str]] = Field(
        None, description='shows data source for the variables'
    )
    includeAll: Optional[bool] = Field(
        None, description='whether all value option is available or not'
    )
    multi: Optional[bool] = Field(
        None,
        description='whether multiple values can be selected or not from variable value list',
    )
    multiFormat: Optional[str] = Field(
        None, description='format to use while fetching timeseries from data source'
    )
    name: Optional[str] = Field(None, description='name of variable')
    options: Optional[List[Option]] = Field(
        None,
        description='array of variable text/value pairs available for selection on dashboard',
    )
    query: Optional[str] = Field(
        None, description='data source query used to fetch values for a variable'
    )
    refresh: Optional[bool] = None
    regex: Optional[str] = None
    type: Optional[str] = Field(
        None, description='type of variable, i.e. custom, query or interval'
    )


class Templating(BaseModel):
    enable: Optional[bool] = Field(
        None, description='whether templating is enabled or not'
    )
    list: Optional[List[ListItem]] = Field(
        None, description='an array of objects each representing one template variable'
    )


class Dashboard(BaseModel):
    id: Optional[Optional[float]] = Field(
        None,
        description='unique numeric identifier for the dashboard. (generated by the db)',
    )
    uid: Optional[constr(min_length=8, max_length=40)] = Field(
        None,
        description='unique dashboard identifier that can be generated by anyone. string (8-40)',
    )
    title: Optional[str] = Field(None, description='current title of dashboard')
    tags: Optional[List[str]] = Field(
        None, description='tags associated with dashboard, an array of strings'
    )
    style: Optional[str] = Field(
        None, description='theme of dashboard, i.e. dark or light'
    )
    timezone: Optional[str] = Field(
        None, description='timezone of dashboard, i.e. utc or browser'
    )
    editable: Optional[bool] = Field(
        None, description='whether a dashboard is editable or not'
    )
    hideControls: Optional[bool] = None
    graphTooltip: Optional[confloat(ge=0.0, le=2.0)] = Field(
        None,
        description='0 for no shared crosshair or tooltip (default), 1 for shared crosshair, 2 for shared crosshair AND shared tooltip',
    )
    panels: Optional[List[Panel]] = Field(
        None,
        description='Panels are the building blocks of a dashboard. It consists of data source queries, type of graphs, aliases, etc. Panel JSON consists of an array of JSON objects, each representing a different panel. Most of the fields are common for all panels but some fields depend on the panel type.',
    )
    time: Optional[Any] = Field(
        None,
        description='time range for dashboard, i.e. last 6 hours, last 7 days, etc',
    )
    timepicker: Optional[Timepicker] = Field(None, description='timepicker metadata')
    templating: Optional[Templating] = Field(None, description='templating metadata')
    annotations: Optional[Any] = Field(None, description='annotations metadata')
    refresh: Optional[Any] = Field(None, description='auto-refresh interval')
    schemaVersion: Optional[float] = Field(
        None,
        description='version of the JSON schema (integer), incremented each time a Grafana update brings changes to said schema',
    )
    version: Optional[confloat(ge=1.0)] = Field(
        None,
        description='version of the dashboard (integer), incremented each time the dashboard is updated',
    )
    links: Optional[Any] = None


class Thing(BaseModel):
    meta: Optional[Meta] = None
    dashboard: Optional[Dashboard] = None
    overwrite: Optional[bool] = None
